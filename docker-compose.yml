services: 
  
  consumer:
    build: 
        context: .
        dockerfile: SimpleConsumerProducer.Consumer/Dockerfile
    ports:
      - "7045:7045"
    depends_on: 
      rabbitmq:
        condition: service_healthy
      PgConsumer:
        condition: service_healthy
        
  producer:
    build: 
        context: .
        dockerfile: SimpleConsumerProducer.Producer/Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
        rabbitmq:
            condition: service_healthy
        PgProducer:
            condition: service_healthy
            
  rabbitmq:
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 3
      
  PgProducer:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    volumes:
      - pgproducer:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
  
  PgConsumer:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: emails
    volumes:
       - pgconsumer:/var/lib/postgresql/data
    ports:
      - "5439:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 3
  
#  Saga.OrderService:
#    image: postgres:latest
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: orders
#    volumes:
#      - pgconsumer:/var/lib/postgresql/data
#    ports:
#      - "5434:5432"
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
#      interval: 5s
#      timeout: 5s
#      retries: 3
#  Saga.OrderSaga:
#    image: postgres:latest
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: orders
#    volumes:
#      - ordersaga:/var/lib/postgresql/data
#    ports:
#        - "5435:5432"
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
#      interval: 5s
#      timeout: 5s
#      retries: 3
volumes: 
    rabbitmq:
    pgproducer:
    pgconsumer:
    ordersaga: